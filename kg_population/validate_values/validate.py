from .concreteTypes.date_type import Date as Datev
from .concreteTypes.url_type import URL as URLv
from .concreteTypes.decimal_type import Decimal as Decimalv
from .concreteTypes.phone_type import Phone as Phonev
from .concreteTypes.email_type import Email as Emailv
from .concreteTypes.int_type import Int as Intv
import math

def is_meaningless(value):

    meaningless_words = ['dimensionless', 'real', 'yes', 'no', 'str', 'int', 'none',
                         'param', 'autogenerated',
                         'term', 'author', 'project', 'journal', 'method']
    try:
        if isinstance(value, str):
            in_meaningless = [w for w in meaningless_words if w.lower() in value.lower()]
            return len(value.split(' ')) <= 2 and in_meaningless
        elif math.isnan(value):
            return True
        else:
            return False
    except Exception as e:
        print(e)
        print(value)


def is_complex(value):
    try:
        if isinstance(value, dict):
            return True
        complex_obj = eval(value)
        if complex_obj and isinstance(complex_obj, dict):
            return True  # if we parse a dictionary it will be True aka complex
        else:
            return False
    except Exception as e:
        return False  # it will fail if we try parse a string


def get_validator(tag):
    t = tag.lower()
    if 'date' in t:
        return Datev()
    elif 'alternateidentifier' in t:
        return URLv()
    elif 'coordinate' in t:
        return Decimalv()
    elif 'phone' in t:
        return Phonev()
    elif 'mail' in t:
        return Emailv()
    elif 'numberof' in t:
        return Intv()
    else:
        return None


def is_valid(value, tag):
    if is_complex(value):
        return False

    if is_meaningless(value):
        return False

    validator = get_validator(tag)
    if validator:
        if validator.get_type(value):
            return True
        else:
            return False
    else: # if not supported for validation, then it assumes it is valid
        return True
    # print('Not supported {}'.format(tag))


if __name__ == '__main__':
    print(is_valid("thomas.scholten@uni-tuebingen.de", "contactPerson_email"))
